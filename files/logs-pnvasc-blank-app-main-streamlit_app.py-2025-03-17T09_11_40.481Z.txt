
[     UTC     ] Logs for blank-app-bnwcytsn3gb4k47qlahtrn.streamlit.app/
────────────────────────────────────────────────────────────────────────────────────────
[20:25:30] 🚀 Starting up repository: 'blank-app', branch: 'main', main module: 'streamlit_app.py'
[20:25:30] 🐙 Cloning repository...
[20:25:31] 🐙 Cloning into '/mount/src/blank-app'...

[20:25:31] 🐙 Cloned repository!
[20:25:31] 🐙 Pulling code changes from Github...
[20:25:32] 📦 Processing dependencies...

──────────────────────────────────────── uv ───────────────────────────────────────────

Using uv pip install.
Using Python 3.12.9 environment at /home/adminuser/venv
Resolved 45 packages in 626ms
Prepared 45 packages in 7.75s
Installed 45 packages in 965ms
 + altair==5.5.0
 + attrs==25.3.0
 + blinker==1.9.0
 + cachetools==5.5.2
 + certifi==2025.1.31
 + charset-normalizer==3.4.1
 + click==8.1.8
 + contourpy==1.3.1
 + cycler==0.12.1
 + fonttools==4.56.0
 + gitdb==4.0.12
 + gitpython==3.1.44
 + idna==3.10
 + jinja2==3.1.6
 + jsonschema==4.23.0
 + jsonschema-specifications==2024.10.1
 + kiwisolver==1.4.8
 + markupsafe==3.0.2
 + matplotlib==3.10.1
 + narwhals==1.30.0
 + numpy==2.2.4
 + packaging==24.2
 + pandas==2.2.3
 + pillow==11.1.0
 + plotly==6.0.0
 + protobuf==5.29.3
 + pyarrow==19.0.1
 + pydeck==0.9.1
 + pyparsing==3.2.1
 + python-dateutil==2.9.0.post0
 + pytz==2025.1
 + referencing==0.36.2
 + requests==2.32.3
 + rpds-py==0.23.1
 + seaborn==0.13.2
 + [2025-03-16 20:25:42.265319] six==1.17.0
 + smmap==5.0.2
 + streamlit==1.43.2
 + tenacity==9.0.0
 + toml==0.10.2
 + tornado==6.4.2
 + typing-extensions==4.12.2
 + tzdata==2025.1
 + urllib3==2.3.0
 + watchdog==6.0.0
Checking if Streamlit is installed
Found Streamlit version 1.43.2 in the environment
Installing rich for an improved exception logging
Using uv pip install.
Using Python 3.12.9 environment at /home/adminuser/venv
Resolved 4 packages in 162ms
Prepared 4 packages in 134ms
Installed 4 packages in 16ms
 + markdown-it-py==3.0.0
 + mdurl==0.1.2
 + pygments==2.19.1
 + rich[2025-03-16 20:25:45.051092] ==13.9.4

────────────────────────────────────────────────────────────────────────────────────────

[20:25:46] 🐍 Python dependencies were installed from /mount/src/blank-app/requirements.txt using uv.
Check if streamlit is installed
Streamlit is already installed
[20:25:48] 📦 Processed dependencies!



[20:34:28] 🐙 Pulling code changes from Github...
[20:34:28] 📦 Processing dependencies...
[20:34:28] 📦 Processed dependencies!
[20:34:30] 🔄 Updated app!
[20:35:09] 🐙 Pulling code changes from Github...
[20:35:10] 📦 Processing dependencies...
[20:35:10] 📦 Processed dependencies!
[20:35:12] 🔄 Updated app!
[21:02:38] 🐙 Pulling code changes from Github...
[21:02:39] 📦 Processing dependencies...
[21:02:39] 📦 Processed dependencies!
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/exec_code.py:121 in exec_func_with_error_handling                        
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:593 in code_to_exec                                     
                                                                                
  /mount/src/blank-app/streamlit_app.py:20 in <module>                          
                                                                                
     17 # Load your dataframes                                                  
     18 # Assuming these are already loaded in your environment                 
     19 # If not, you'll need to add code to load them from files               
  ❱  20 data = pd.read_csv('NoA-Connect-JrDataScience-Case(in).csv')  # Origin  
     21 customer_features_clustered = pd.read_csv('customer_features_clustered  
     22 data['order_date'] = pd.to_datetime(data['order_date'])                 
     23                                                                         
────────────────────────────────────────────────────────────────────────────────
NameError: name 'data' is not defined
[21:02:44] 🔄 Updated app!
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/exec_code.py:121 in exec_func_with_error_handling                        
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:593 in code_to_exec                                     
                                                                                
  /mount/src/blank-app/streamlit_app.py:20 in <module>                          
                                                                                
     17 # Load your dataframes                                                  
     18 # Assuming these are already loaded in your environment                 
     19 # If not, you'll need to add code to load them from files               
  ❱  20 data = data  # Original dataframe with order_date, currency, and purch  
     21 customer_features_clustered = customer_features_clustered  # Dataframe  
     22                                                                         
     23 # Title and description                                                 
────────────────────────────────────────────────────────────────────────────────
NameError: name 'data' is not defined
[21:04:08] 🐙 Pulling code changes from Github...
[21:04:09] 📦 Processing dependencies...
[21:04:09] 📦 Processed dependencies!
[21:04:11] 🔄 Updated app!
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/exec_code.py:121 in exec_func_with_error_handling                        
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:593 in code_to_exec                                     
                                                                                
  /mount/src/blank-app/streamlit_app.py:20 in <module>                          
                                                                                
     17 # Load your dataframes                                                  
     18 # Assuming these are already loaded in your environment                 
     19 # If not, you'll need to add code to load them from files               
  ❱  20 data = data  # Original dataframe with order_date, currency, and purch  
     21 customer_features_clustered = customer_features_clustered  # Dataframe  
     22                                                                         
     23 # Title and description                                                 
────────────────────────────────────────────────────────────────────────────────
NameError: name 'data' is not defined
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/exec_code.py:121 in exec_func_with_error_handling                        
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:593 in code_to_exec                                     
                                                                                
  /mount/src/blank-app/streamlit_app.py:20 in <module>                          
                                                                                
     17 # Load your dataframes                                                  
     18 # Assuming these are already loaded in your environment                 
     19 # If not, you'll need to add code to load them from files               
  ❱  20 data = pd.read_csv('NoA-Connect-JrDataScience-Case(in).csv')  # Origin  
     21 customer_features_clustered = pd.read_csv('customer_features_clustered  
     22                                                                         
     23 # Title and description                                                 
────────────────────────────────────────────────────────────────────────────────
NameError: name 'data' is not defined
[21:05:32] ❗️ 
2025-03-16 21:05:32.379 503 GET /script-health-check (127.0.0.1) 360.82ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/exec_code.py:121 in exec_func_with_error_handling                        
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:593 in code_to_exec                                     
                                                                                
  /mount/src/blank-app/streamlit_app.py:20 in <module>                          
                                                                                
     17 # Load your dataframes                                                  
     18 # Assuming these are already loaded in your environment                 
     19 # If not, you'll need to add code to load them from files               
  ❱  20 data = pd.read_csv('NoA-Connect-JrDataScience-Case(in).csv')  # Origin  
     21 customer_features_clustered = pd.read_csv('customer_features_clustered  
     22                                                                         
     23 # Title and description                                                 
────────────────────────────────────────────────────────────────────────────────
NameError: name 'data' is not defined
2025-03-16 21:05:37.349 503 GET /script-health-check (127.0.0.1) 334.23ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/exec_code.py:121 in exec_func_with_error_handling                        
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:593 in code_to_exec                                     
                                                                                
  /mount/src/blank-app/streamlit_app.py:20 in <module>                          
                                                                                
     17 # Load your dataframes                                                  
     18 # Assuming these are already loaded in your environment                 
     19 # If not, you'll need to add code to load them from files               
  ❱  20 data = pd.read_csv('NoA-Connect-JrDataScience-Case(in).csv')  # Origin  
     21 customer_features_clustered = pd.read_csv('customer_features_clustered  
     22                                                                         
     23 # Title and description                                                 
────────────────────────────────────────────────────────────────────────────────
NameError: name 'data' is not defined
2025-03-16 21:05:42.420 503 GET /script-health-check (127.0.0.1) 289.71ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/exec_code.py:121 in exec_func_with_error_handling                        
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:593 in code_to_exec                                     
                                                                                
  /mount/src/blank-app/streamlit_app.py:20 in <module>                          
                                                                                
     17 # Load your dataframes                                                  
     18 # Assuming these are already loaded in your environment                 
     19 # If not, you'll need to add code to load them from files               
  ❱  20 data = pd.read_csv('NoA-Connect-JrDataScience-Case(in).csv')  # Origin  
     21 customer_features_clustered = pd.read_csv('customer_features_clustered  
     22                                                                         
     23 # Title and description                                                 
────────────────────────────────────────────────────────────────────────────────
NameError: name 'data' is not defined
2025-03-16 21:05:47.403 503 GET /script-health-check (127.0.0.1) 386.89ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/exec_code.py:121 in exec_func_with_error_handling                        
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:593 in code_to_exec                                     
                                                                                
  /mount/src/blank-app/streamlit_app.py:20 in <module>                          
                                                                                
     17 # Load your dataframes                                                  
     18 # Assuming these are already loaded in your environment                 
     19 # If not, you'll need to add code to load them from files               
  ❱  20 data = pd.read_csv('NoA-Connect-JrDataScience-Case(in).csv')  # Origin  
     21 customer_features_clustered = pd.read_csv('customer_features_clustered  
     22                                                                         
     23 # Title and description                                                 
────────────────────────────────────────────────────────────────────────────────
NameError: name 'data' is not defined
2025-03-16 21:05:52.363 503 GET /script-health-check (127.0.0.1) 319.76ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/exec_code.py:121 in exec_func_with_error_handling                        
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:593 in code_to_exec                                     
                                                                                
  /mount/src/blank-app/streamlit_app.py:20 in <module>                          
                                                                                
     17 # Load your dataframes                                                  
     18 # Assuming these are already loaded in your environment                 
     19 # If not, you'll need to add code to load them from files               
  ❱  20 data = pd.read_csv('NoA-Connect-JrDataScience-Case(in).csv')  # Origin  
     21 customer_features_clustered = pd.read_csv('customer_features_clustered  
     22                                                                         
     23 # Title and description                                                 
────────────────────────────────────────────────────────────────────────────────
NameError: name 'data' is not defined
2025-03-16 21:05:57.352 503 GET /script-health-check (127.0.0.1) 347.06ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/exec_code.py:121 in exec_func_with_error_handling                        
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:593 in code_to_exec                                     
                                                                                
  /mount/src/blank-app/streamlit_app.py:20 in <module>                          
                                                                                
     17 # Load your dataframes                                                  
     18 # Assuming these are already loaded in your environment                 
     19 # If not, you'll need to add code to load them from files               
  ❱  20 data = pd.read_csv('NoA-Connect-JrDataScience-Case(in).csv')  # Origin  
     21 customer_features_clustered = pd.read_csv('customer_features_clustered  
     22                                                                         
     23 # Title and description                                                 
────────────────────────────────────────────────────────────────────────────────
NameError: name 'data' is not defined
2025-03-16 21:06:02.409 503 GET /script-health-check (127.0.0.1) 301.07ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/exec_code.py:121 in exec_func_with_error_handling                        
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:593 in code_to_exec                                     
                                                                                
  /mount/src/blank-app/streamlit_app.py:20 in <module>                          
                                                                                
     17 # Load your dataframes                                                  
     18 # Assuming these are already loaded in your environment                 
     19 # If not, you'll need to add code to load them from files               
  ❱  20 data = pd.read_csv('NoA-Connect-JrDataScience-Case(in).csv')  # Origin  
     21 customer_features_clustered = pd.read_csv('customer_features_clustered  
     22                                                                         
     23 # Title and description                                                 
────────────────────────────────────────────────────────────────────────────────
NameError: name 'data' is not defined
2025-03-16 21:06:07.732 503 GET /script-health-check (127.0.0.1) 397.95ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/exec_code.py:121 in exec_func_with_error_handling                        
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:593 in code_to_exec                                     
                                                                                
  /mount/src/blank-app/streamlit_app.py:20 in <module>                          
                                                                                
     17 # Load your dataframes                                                  
     18 # Assuming these are already loaded in your environment                 
     19 # If not, you'll need to add code to load them from files               
  ❱  20 data = pd.read_csv('NoA-Connect-JrDataScience-Case(in).csv')  # Origin  
     21 customer_features_clustered = pd.read_csv('customer_features_clustered  
     22                                                                         
     23 # Title and description                                                 
────────────────────────────────────────────────────────────────────────────────
NameError: name 'data' is not defined
2025-03-16 21:06:12.534 503 GET /script-health-check (127.0.0.1) 408.76ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/exec_code.py:121 in exec_func_with_error_handling                        
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:593 in code_to_exec                                     
                                                                                
  /mount/src/blank-app/streamlit_app.py:20 in <module>                          
                                                                                
     17 # Load your dataframes                                                  
     18 # Assuming these are already loaded in your environment                 
     19 # If not, you'll need to add code to load them from files               
  ❱  20 data = pd.read_csv('NoA-Connect-JrDataScience-Case(in).csv')  # Origin  
     21 customer_features_clustered = pd.read_csv('customer_features_clustered  
     22                                                                         
     23 # Title and description                                                 
────────────────────────────────────────────────────────────────────────────────
NameError: name 'data' is not defined
2025-03-16 21:06:17.562 503 GET /script-health-check (127.0.0.1) 356.27ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/exec_code.py:121 in exec_func_with_error_handling                        
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:593 in code_to_exec                                     
                                                                                
  /mount/src/blank-app/streamlit_app.py:20 in <module>                          
                                                                                
     17 # Load your dataframes                                                  
     18 # Assuming these are already loaded in your environment                 
     19 # If not, you'll need to add code to load them from files               
  ❱  20 data = pd.read_csv('NoA-Connect-JrDataScience-Case(in).csv')  # Origin  
     21 customer_features_clustered = pd.read_csv('customer_features_clustered  
     22                                                                         
     23 # Title and description                                                 
────────────────────────────────────────────────────────────────────────────────
NameError: name 'data' is not defined
2025-03-16 21:06:22.832 503 GET /script-health-check (127.0.0.1) 418.50ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/exec_code.py:121 in exec_func_with_error_handling                        
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:593 in code_to_exec                                     
                                                                                
  /mount/src/blank-app/streamlit_app.py:20 in <module>                          
                                                                                
     17 # Load your dataframes                                                  
     18 # Assuming these are already loaded in your environment                 
     19 # If not, you'll need to add code to load them from files               
  ❱  20 data = pd.read_csv('NoA-Connect-JrDataScience-Case(in).csv')  # Origin  
     21 customer_features_clustered = pd.read_csv('customer_features_clustered  
     22                                                                         
     23 # Title and description                                                 
────────────────────────────────────────────────────────────────────────────────
NameError: name 'data' is not defined
2025-03-16 21:06:27.543 503 GET /script-health-check (127.0.0.1) 388.50ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/exec_code.py:121 in exec_func_with_error_handling                        
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:593 in code_to_exec                                     
                                                                                
  /mount/src/blank-app/streamlit_app.py:20 in <module>                          
                                                                                
     17 # Load your dataframes                                                  
     18 # Assuming these are already loaded in your environment                 
     19 # If not, you'll need to add code to load them from files               
  ❱  20 data = pd.read_csv('NoA-Connect-JrDataScience-Case(in).csv')  # Origin  
     21 customer_features_clustered = pd.read_csv('customer_features_clustered  
     22                                                                         
     23 # Title and description                                                 
────────────────────────────────────────────────────────────────────────────────
NameError: name 'data' is not defined
2025-03-16 21:06:32.636 503 GET /script-health-check (127.0.0.1) 402.80ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/exec_code.py:121 in exec_func_with_error_handling                        
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:593 in code_to_exec                                     
                                                                                
  /mount/src/blank-app/streamlit_app.py:20 in <module>                          
                                                                                
     17 # Load your dataframes                                                  
     18 # Assuming these are already loaded in your environment                 
     19 # If not, you'll need to add code to load them from files               
  ❱  20 data = pd.read_csv('NoA-Connect-JrDataScience-Case(in).csv')  # Origin  
     21 customer_features_clustered = pd.read_csv('customer_features_clustered  
     22                                                                         
     23 # Title and description                                                 
────────────────────────────────────────────────────────────────────────────────
NameError: name 'data' is not defined
2025-03-16 21:06:37.533 503 GET /script-health-check (127.0.0.1) 404.32ms
[21:06:38] 🐙 Pulling code changes from Github...
[21:06:38] 📦 Processing dependencies...
[21:06:38] 📦 Processed dependencies!
[21:06:41] 🔄 Updated app!
[07:59:09] 🐙 Pulling code changes from Github...
[07:59:10] 📦 Processing dependencies...
[07:59:10] 📦 Processed dependencies!
[07:59:12] 🔄 Updated app!
[09:09:24] 🐙 Pulling code changes from Github...
[09:09:26] 📦 Processing dependencies...

──────────────────────────────────────── uv ───────────────────────────────────────────

Using uv pip install.
Using Python 3.12.9 environment at /home/adminuser/venv
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/exec_code.py:121 in exec_func_with_error_handling                        
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:593 in code_to_exec                                     
                                                                                
  /mount/src/blank-app/streamlit_app.py:147 in <module>                         
                                                                                
    144 │   }).reset_index()                                                    
    145 │                                                                       
    146 │   cluster_metrics['Segment'] = cluster_metrics['cluster'].map({       
  ❱ 147 │   │   1: "High-Value Loyalists",                                      
    148 │   │   0: "Occasional Buyers"                                          
    149 │   })                                                                  
    150                                                                         
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/groupby/generi  
  c.py:1432 in aggregate                                                        
                                                                                
    1429 │   │   │   kwargs["engine_kwargs"] = engine_kwargs                    
    1430 │   │                                                                  
    1431 │   │   op = GroupByApply(self, func, args=args, kwargs=kwargs)        
  ❱ 1432 │   │   result = op.agg()                                              
    1433 │   │   if not is_dict_like(func) and result is not None:              
    1434 │   │   │   # GH #52849                                                
    1435 │   │   │   if not self.as_index and is_list_like(func):               
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:190    
  in agg                                                                        
                                                                                
     187 │   │   │   return self.apply_str()                                    
     188 │   │                                                                  
     189 │   │   if is_dict_like(func):                                         
  ❱  190 │   │   │   return self.agg_dict_like()                                
     191 │   │   elif is_list_like(func):                                       
     192 │   │   │   # we require a list, but not a 'str'                       
     193 │   │   │   return self.agg_list_like()                                
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:423    
  in agg_dict_like                                                              
                                                                                
     420 │   │   -------                                                        
     421 │   │   Result of aggregation.                                         
     422 │   │   """                                                            
  ❱  423 │   │   return self.agg_or_apply_dict_like(op_name="agg")              
     424 │                                                                      
     425 │   def compute_dict_like(                                             
     426 │   │   self,                                                          
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:1608   
  in agg_or_apply_dict_like                                                     
                                                                                
    1605 │   │   with com.temp_setattr(                                         
    1606 │   │   │   obj, "as_index", True, condition=hasattr(obj, "as_index")  
    1607 │   │   ):                                                             
  ❱ 1608 │   │   │   result_index, result_data = self.compute_dict_like(        
    1609 │   │   │   │   op_name, selected_obj, selection, kwargs               
    1610 │   │   │   )                                                          
    1611 │   │   result = self.wrap_results_dict_like(selected_obj, result_ind  
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:462    
  in compute_dict_like                                                          
                                                                                
     459 │   │   obj = self.obj                                                 
     460 │   │   is_groupby = isinstance(obj, (DataFrameGroupBy, SeriesGroupBy  
     461 │   │   func = cast(AggFuncTypeDict, self.func)                        
  ❱  462 │   │   func = self.normalize_dictlike_arg(op_name, selected_obj, fun  
     463 │   │                                                                  
     464 │   │   is_non_unique_col = (                                          
     465 │   │   │   selected_obj.ndim == 2                                     
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:663    
  in normalize_dictlike_arg                                                     
                                                                                
     660 │   │   │                                                              
     661 │   │   │   cols = Index(list(func.keys())).difference(obj.columns, s  
     662 │   │   │   if len(cols) > 0:                                          
  ❱  663 │   │   │   │   raise KeyError(f"Column(s) {list(cols)} do not exist"  
     664 │   │                                                                  
     665 │   │   aggregator_types = (list, tuple, dict)                         
     666                                                                        
────────────────────────────────────────────────────────────────────────────────
KeyError: "Column(s) ['customer_value_score'] do not exist"
Resolved 87 packages in 2.08s
Prepared [2025-03-17 09:10:11.756719] 43 packages[2025-03-17 09:10:11.757063]  [2025-03-17 09:10:11.757305] in 42.22s[2025-03-17 09:10:11.757500] 
Uninstalled 1 package in 44ms
Installed 43 packages in 600ms
 + annotated-types==0.7.0
 + dacite==1.9.2
 + filelock==3.18.0
 + fsspec==2025.3.0
 + htmlmin==0.1.12
 + imagehash==4.3.1
 + joblib==1.4.2
 + mpmath==1.3.0
 + multimethod==1.12
 + networkx==3.4.2
 - numpy==2.2.4
 [2025-03-17 09:10:12.372587] + numpy==2.1.3
 + nvidia-cublas-cu12==12.4.5.8
 + nvidia-cuda-cupti-cu12==12.4.127
 + nvidia-cuda-nvrtc-cu12==12.4.127
 + nvidia-cuda-runtime-cu12==12.4.127
 + nvidia-cudnn-cu12==9.1.0.70
 + nvidia-cufft-cu12==11.2.1.3
 + nvidia-curand-cu12==10.3.5.147
 + nvidia-cusolver-cu12==11.6.1.9
 [2025-03-17 09:10:12.372863] + nvidia-cusparse-cu12==12.3.1.170
 + nvidia-cusparselt-cu12==0.6.2
 + nvidia-nccl-cu12==2.21.5
 + nvidia-nvjitlink-cu12==12.4.127
 + nvidia-nvtx-cu12==12.4.127
 + patsy==1.0.1
 + [2025-03-17 09:10:12.373023] phik==0.12.4
 + pydantic==2.10.6
 + pydantic-core==2.27.2
 + pywavelets==1.8.0
 + pyyaml==6.0.2
 + scikit-learn==1.6.1
 + scipy==[2025-03-17 09:10:12.373198] 1.15.2
 + setuptools==76.0.0
 + statsmodels==0.14.4
 + sympy==1.13.1
 + threadpoolctl==3.6.0
 + torch==2.6.0
 + tqdm==4.67.1
 + [2025-03-17 09:10:12.373420] triton==3.2.0
 + typeguard==4.4.2
 + visions==0.7.6
 + wordcloud==1.9.4
 + ydata-profiling==4.12.2
Checking if Streamlit is installed
Found Streamlit version 1.43.2 in the environment
Installing rich for an improved exception logging
Using uv pip install.
Using Python 3.12.9 environment at /home/adminuser/venv
Audited 1 package in 108ms

────────────────────────────────────────────────────────────────────────────────────────

[09:10:15] 🐍 Python dependencies were installed from /mount/src/blank-app/requirements.txt using uv.
[09:10:15] 📦 Processed dependencies!
  Stopping...



[09:10:18] 🔄 Updated app!
[09:10:30] 🐙 Pulling code changes from Github...
[09:10:31] 📦 Processing dependencies...
[09:10:31] 📦 Processed dependencies!
[09:10:33] 🔄 Updated app!
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/exec_code.py:121 in exec_func_with_error_handling                        
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:593 in code_to_exec                                     
                                                                                
  /mount/src/blank-app/streamlit_app.py:147 in <module>                         
                                                                                
    144 │   st.subheader("Average Metrics by Segment")                          
    145 │                                                                       
    146 │   # Calculate average metrics for each cluster                        
  ❱ 147 │   cluster_metrics = filtered_customers.groupby('cluster').agg({       
    148 │   │   'monetary': 'mean',                                             
    149 │   │   'frequency': 'mean',                                            
    150 │   │   'recency': 'mean',                                              
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/groupby/generi  
  c.py:1432 in aggregate                                                        
                                                                                
    1429 │   │   │   kwargs["engine_kwargs"] = engine_kwargs                    
    1430 │   │                                                                  
    1431 │   │   op = GroupByApply(self, func, args=args, kwargs=kwargs)        
  ❱ 1432 │   │   result = op.agg()                                              
    1433 │   │   if not is_dict_like(func) and result is not None:              
    1434 │   │   │   # GH #52849                                                
    1435 │   │   │   if not self.as_index and is_list_like(func):               
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:190    
  in agg                                                                        
                                                                                
     187 │   │   │   return self.apply_str()                                    
     188 │   │                                                                  
     189 │   │   if is_dict_like(func):                                         
  ❱  190 │   │   │   return self.agg_dict_like()                                
     191 │   │   elif is_list_like(func):                                       
     192 │   │   │   # we require a list, but not a 'str'                       
     193 │   │   │   return self.agg_list_like()                                
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:423    
  in agg_dict_like                                                              
                                                                                
     420 │   │   -------                                                        
     421 │   │   Result of aggregation.                                         
     422 │   │   """                                                            
  ❱  423 │   │   return self.agg_or_apply_dict_like(op_name="agg")              
     424 │                                                                      
     425 │   def compute_dict_like(                                             
     426 │   │   self,                                                          
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:1608   
  in agg_or_apply_dict_like                                                     
                                                                                
    1605 │   │   with com.temp_setattr(                                         
    1606 │   │   │   obj, "as_index", True, condition=hasattr(obj, "as_index")  
    1607 │   │   ):                                                             
  ❱ 1608 │   │   │   result_index, result_data = self.compute_dict_like(        
    1609 │   │   │   │   op_name, selected_obj, selection, kwargs               
    1610 │   │   │   )                                                          
    1611 │   │   result = self.wrap_results_dict_like(selected_obj, result_ind  
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:462    
  in compute_dict_like                                                          
                                                                                
     459 │   │   obj = self.obj                                                 
     460 │   │   is_groupby = isinstance(obj, (DataFrameGroupBy, SeriesGroupBy  
     461 │   │   func = cast(AggFuncTypeDict, self.func)                        
  ❱  462 │   │   func = self.normalize_dictlike_arg(op_name, selected_obj, fun  
     463 │   │                                                                  
     464 │   │   is_non_unique_col = (                                          
     465 │   │   │   selected_obj.ndim == 2                                     
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:663    
  in normalize_dictlike_arg                                                     
                                                                                
     660 │   │   │                                                              
     661 │   │   │   cols = Index(list(func.keys())).difference(obj.columns, s  
     662 │   │   │   if len(cols) > 0:                                          
  ❱  663 │   │   │   │   raise KeyError(f"Column(s) {list(cols)} do not exist"  
     664 │   │                                                                  
     665 │   │   aggregator_types = (list, tuple, dict)                         
     666                                                                        
────────────────────────────────────────────────────────────────────────────────
KeyError: "Column(s) ['customer_value_score'] do not exist"
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/exec_code.py:121 in exec_func_with_error_handling                        
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:593 in code_to_exec                                     
                                                                                
  /mount/src/blank-app/streamlit_app.py:147 in <module>                         
                                                                                
    144 │   st.subheader("Average Metrics by Segment")                          
    145 │                                                                       
    146 │   # Calculate average metrics for each cluster                        
  ❱ 147 │   cluster_metrics = filtered_customers.groupby('cluster').agg({       
    148 │   │   'monetary': 'mean',                                             
    149 │   │   'frequency': 'mean',                                            
    150 │   │   'recency': 'mean',                                              
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/groupby/generi  
  c.py:1432 in aggregate                                                        
                                                                                
    1429 │   │   │   kwargs["engine_kwargs"] = engine_kwargs                    
    1430 │   │                                                                  
    1431 │   │   op = GroupByApply(self, func, args=args, kwargs=kwargs)        
  ❱ 1432 │   │   result = op.agg()                                              
    1433 │   │   if not is_dict_like(func) and result is not None:              
    1434 │   │   │   # GH #52849                                                
    1435 │   │   │   if not self.as_index and is_list_like(func):               
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:190    
  in agg                                                                        
                                                                                
     187 │   │   │   return self.apply_str()                                    
     188 │   │                                                                  
     189 │   │   if is_dict_like(func):                                         
  ❱  190 │   │   │   return self.agg_dict_like()                                
     191 │   │   elif is_list_like(func):                                       
     192 │   │   │   # we require a list, but not a 'str'                       
     193 │   │   │   return self.agg_list_like()                                
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:423    
  in agg_dict_like                                                              
                                                                                
     420 │   │   -------                                                        
     421 │   │   Result of aggregation.                                         
     422 │   │   """                                                            
  ❱  423 │   │   return self.agg_or_apply_dict_like(op_name="agg")              
     424 │                                                                      
     425 │   def compute_dict_like(                                             
     426 │   │   self,                                                          
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:1608   
  in agg_or_apply_dict_like                                                     
                                                                                
    1605 │   │   with com.temp_setattr(                                         
    1606 │   │   │   obj, "as_index", True, condition=hasattr(obj, "as_index")  
    1607 │   │   ):                                                             
  ❱ 1608 │   │   │   result_index, result_data = self.compute_dict_like(        
    1609 │   │   │   │   op_name, selected_obj, selection, kwargs               
    1610 │   │   │   )                                                          
    1611 │   │   result = self.wrap_results_dict_like(selected_obj, result_ind  
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:462    
  in compute_dict_like                                                          
                                                                                
     459 │   │   obj = self.obj                                                 
     460 │   │   is_groupby = isinstance(obj, (DataFrameGroupBy, SeriesGroupBy  
     461 │   │   func = cast(AggFuncTypeDict, self.func)                        
  ❱  462 │   │   func = self.normalize_dictlike_arg(op_name, selected_obj, fun  
     463 │   │                                                                  
     464 │   │   is_non_unique_col = (                                          
     465 │   │   │   selected_obj.ndim == 2                                     
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:663    
  in normalize_dictlike_arg                                                     
                                                                                
     660 │   │   │                                                              
     661 │   │   │   cols = Index(list(func.keys())).difference(obj.columns, s  
     662 │   │   │   if len(cols) > 0:                                          
  ❱  663 │   │   │   │   raise KeyError(f"Column(s) {list(cols)} do not exist"  
     664 │   │                                                                  
     665 │   │   aggregator_types = (list, tuple, dict)                         
     666                                                                        
────────────────────────────────────────────────────────────────────────────────
KeyError: "Column(s) ['customer_value_score'] do not exist"
[09:10:35] ❗️ 
2025-03-17 09:10:35.990 503 GET /script-health-check (127.0.0.1) 1547.46ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/exec_code.py:121 in exec_func_with_error_handling                        
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:593 in code_to_exec                                     
                                                                                
  /mount/src/blank-app/streamlit_app.py:147 in <module>                         
                                                                                
    144 │   st.subheader("Average Metrics by Segment")                          
    145 │                                                                       
    146 │   # Calculate average metrics for each cluster                        
  ❱ 147 │   cluster_metrics = filtered_customers.groupby('cluster').agg({       
    148 │   │   'monetary': 'mean',                                             
    149 │   │   'frequency': 'mean',                                            
    150 │   │   'recency': 'mean',                                              
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/groupby/generi  
  c.py:1432 in aggregate                                                        
                                                                                
    1429 │   │   │   kwargs["engine_kwargs"] = engine_kwargs                    
    1430 │   │                                                                  
    1431 │   │   op = GroupByApply(self, func, args=args, kwargs=kwargs)        
  ❱ 1432 │   │   result = op.agg()                                              
    1433 │   │   if not is_dict_like(func) and result is not None:              
    1434 │   │   │   # GH #52849                                                
    1435 │   │   │   if not self.as_index and is_list_like(func):               
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:190    
  in agg                                                                        
                                                                                
     187 │   │   │   return self.apply_str()                                    
     188 │   │                                                                  
     189 │   │   if is_dict_like(func):                                         
  ❱  190 │   │   │   return self.agg_dict_like()                                
     191 │   │   elif is_list_like(func):                                       
     192 │   │   │   # we require a list, but not a 'str'                       
     193 │   │   │   return self.agg_list_like()                                
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:423    
  in agg_dict_like                                                              
                                                                                
     420 │   │   -------                                                        
     421 │   │   Result of aggregation.                                         
     422 │   │   """                                                            
  ❱  423 │   │   return self.agg_or_apply_dict_like(op_name="agg")              
     424 │                                                                      
     425 │   def compute_dict_like(                                             
     426 │   │   self,                                                          
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:1608   
  in agg_or_apply_dict_like                                                     
                                                                                
    1605 │   │   with com.temp_setattr(                                         
    1606 │   │   │   obj, "as_index", True, condition=hasattr(obj, "as_index")  
    1607 │   │   ):                                                             
  ❱ 1608 │   │   │   result_index, result_data = self.compute_dict_like(        
    1609 │   │   │   │   op_name, selected_obj, selection, kwargs               
    1610 │   │   │   )                                                          
    1611 │   │   result = self.wrap_results_dict_like(selected_obj, result_ind  
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:462    
  in compute_dict_like                                                          
                                                                                
     459 │   │   obj = self.obj                                                 
     460 │   │   is_groupby = isinstance(obj, (DataFrameGroupBy, SeriesGroupBy  
     461 │   │   func = cast(AggFuncTypeDict, self.func)                        
  ❱  462 │   │   func = self.normalize_dictlike_arg(op_name, selected_obj, fun  
     463 │   │                                                                  
     464 │   │   is_non_unique_col = (                                          
     465 │   │   │   selected_obj.ndim == 2                                     
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:663    
  in normalize_dictlike_arg                                                     
                                                                                
     660 │   │   │                                                              
     661 │   │   │   cols = Index(list(func.keys())).difference(obj.columns, s  
     662 │   │   │   if len(cols) > 0:                                          
  ❱  663 │   │   │   │   raise KeyError(f"Column(s) {list(cols)} do not exist"  
     664 │   │                                                                  
     665 │   │   aggregator_types = (list, tuple, dict)                         
     666                                                                        
────────────────────────────────────────────────────────────────────────────────
KeyError: "Column(s) ['customer_value_score'] do not exist"
2025-03-17 09:10:40.305 503 GET /script-health-check (127.0.0.1) 937.03ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/exec_code.py:121 in exec_func_with_error_handling                        
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:593 in code_to_exec                                     
                                                                                
  /mount/src/blank-app/streamlit_app.py:147 in <module>                         
                                                                                
    144 │   st.subheader("Average Metrics by Segment")                          
    145 │                                                                       
    146 │   # Calculate average metrics for each cluster                        
  ❱ 147 │   cluster_metrics = filtered_customers.groupby('cluster').agg({       
    148 │   │   'monetary': 'mean',                                             
    149 │   │   'frequency': 'mean',                                            
    150 │   │   'recency': 'mean',                                              
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/groupby/generi  
  c.py:1432 in aggregate                                                        
                                                                                
    1429 │   │   │   kwargs["engine_kwargs"] = engine_kwargs                    
    1430 │   │                                                                  
    1431 │   │   op = GroupByApply(self, func, args=args, kwargs=kwargs)        
  ❱ 1432 │   │   result = op.agg()                                              
    1433 │   │   if not is_dict_like(func) and result is not None:              
    1434 │   │   │   # GH #52849                                                
    1435 │   │   │   if not self.as_index and is_list_like(func):               
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:190    
  in agg                                                                        
                                                                                
     187 │   │   │   return self.apply_str()                                    
     188 │   │                                                                  
     189 │   │   if is_dict_like(func):                                         
  ❱  190 │   │   │   return self.agg_dict_like()                                
     191 │   │   elif is_list_like(func):                                       
     192 │   │   │   # we require a list, but not a 'str'                       
     193 │   │   │   return self.agg_list_like()                                
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:423    
  in agg_dict_like                                                              
                                                                                
     420 │   │   -------                                                        
     421 │   │   Result of aggregation.                                         
     422 │   │   """                                                            
  ❱  423 │   │   return self.agg_or_apply_dict_like(op_name="agg")              
     424 │                                                                      
     425 │   def compute_dict_like(                                             
     426 │   │   self,                                                          
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:1608   
  in agg_or_apply_dict_like                                                     
                                                                                
    1605 │   │   with com.temp_setattr(                                         
    1606 │   │   │   obj, "as_index", True, condition=hasattr(obj, "as_index")  
    1607 │   │   ):                                                             
  ❱ 1608 │   │   │   result_index, result_data = self.compute_dict_like(        
    1609 │   │   │   │   op_name, selected_obj, selection, kwargs               
    1610 │   │   │   )                                                          
    1611 │   │   result = self.wrap_results_dict_like(selected_obj, result_ind  
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:462    
  in compute_dict_like                                                          
                                                                                
     459 │   │   obj = self.obj                                                 
     460 │   │   is_groupby = isinstance(obj, (DataFrameGroupBy, SeriesGroupBy  
     461 │   │   func = cast(AggFuncTypeDict, self.func)                        
  ❱  462 │   │   func = self.normalize_dictlike_arg(op_name, selected_obj, fun  
     463 │   │                                                                  
     464 │   │   is_non_unique_col = (                                          
     465 │   │   │   selected_obj.ndim == 2                                     
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:663    
  in normalize_dictlike_arg                                                     
                                                                                
     660 │   │   │                                                              
     661 │   │   │   cols = Index(list(func.keys())).difference(obj.columns, s  
     662 │   │   │   if len(cols) > 0:                                          
  ❱  663 │   │   │   │   raise KeyError(f"Column(s) {list(cols)} do not exist"  
     664 │   │                                                                  
     665 │   │   aggregator_types = (list, tuple, dict)                         
     666                                                                        
────────────────────────────────────────────────────────────────────────────────
KeyError: "Column(s) ['customer_value_score'] do not exist"
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/exec_code.py:121 in exec_func_with_error_handling                        
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:593 in code_to_exec                                     
                                                                                
  /mount/src/blank-app/streamlit_app.py:147 in <module>                         
                                                                                
    144 │   st.subheader("Average Metrics by Segment")                          
    145 │                                                                       
    146 │   # Calculate average metrics for each cluster                        
  ❱ 147 │   cluster_metrics = filtered_customers.groupby('cluster').agg({       
    148 │   │   'monetary': 'mean',                                             
    149 │   │   'frequency': 'mean',                                            
    150 │   │   'recency': 'mean',                                              
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/groupby/generi  
  c.py:1432 in aggregate                                                        
                                                                                
    1429 │   │   │   kwargs["engine_kwargs"] = engine_kwargs                    
    1430 │   │                                                                  
    1431 │   │   op = GroupByApply(self, func, args=args, kwargs=kwargs)        
  ❱ 1432 │   │   result = op.agg()                                              
    1433 │   │   if not is_dict_like(func) and result is not None:              
    1434 │   │   │   # GH #52849                                                
    1435 │   │   │   if not self.as_index and is_list_like(func):               
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:190    
  in agg                                                                        
                                                                                
     187 │   │   │   return self.apply_str()                                    
     188 │   │                                                                  
     189 │   │   if is_dict_like(func):                                         
  ❱  190 │   │   │   return self.agg_dict_like()                                
     191 │   │   elif is_list_like(func):                                       
     192 │   │   │   # we require a list, but not a 'str'                       
     193 │   │   │   return self.agg_list_like()                                
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:423    
  in agg_dict_like                                                              
                                                                                
     420 │   │   -------                                                        
     421 │   │   Result of aggregation.                                         
     422 │   │   """                                                            
  ❱  423 │   │   return self.agg_or_apply_dict_like(op_name="agg")              
     424 │                                                                      
     425 │   def compute_dict_like(                                             
     426 │   │   self,                                                          
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:1608   
  in agg_or_apply_dict_like                                                     
                                                                                
    1605 │   │   with com.temp_setattr(                                         
    1606 │   │   │   obj, "as_index", True, condition=hasattr(obj, "as_index")  
    1607 │   │   ):                                                             
  ❱ 1608 │   │   │   result_index, result_data = self.compute_dict_like(        
    1609 │   │   │   │   op_name, selected_obj, selection, kwargs               
    1610 │   │   │   )                                                          
    1611 │   │   result = self.wrap_results_dict_like(selected_obj, result_ind  
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:462    
  in compute_dict_like                                                          
                                                                                
     459 │   │   obj = self.obj                                                 
     460 │   │   is_groupby = isinstance(obj, (DataFrameGroupBy, SeriesGroupBy  
     461 │   │   func = cast(AggFuncTypeDict, self.func)                        
  ❱  462 │   │   func = self.normalize_dictlike_arg(op_name, selected_obj, fun  
     463 │   │                                                                  
     464 │   │   is_non_unique_col = (                                          
     465 │   │   │   selected_obj.ndim == 2                                     
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:663    
  in normalize_dictlike_arg                                                     
                                                                                
     660 │   │   │                                                              
     661 │   │   │   cols = Index(list(func.keys())).difference(obj.columns, s  
     662 │   │   │   if len(cols) > 0:                                          
  ❱  663 │   │   │   │   raise KeyError(f"Column(s) {list(cols)} do not exist"  
     664 │   │                                                                  
     665 │   │   aggregator_types = (list, tuple, dict)                         
     666                                                                        
────────────────────────────────────────────────────────────────────────────────
KeyError: "Column(s) ['customer_value_score'] do not exist"
2025-03-17 09:10:45.305 503 GET /script-health-check (127.0.0.1) 934.79ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/exec_code.py:121 in exec_func_with_error_handling                        
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:593 in code_to_exec                                     
                                                                                
  /mount/src/blank-app/streamlit_app.py:147 in <module>                         
                                                                                
    144 │   st.subheader("Average Metrics by Segment")                          
    145 │                                                                       
    146 │   # Calculate average metrics for each cluster                        
  ❱ 147 │   cluster_metrics = filtered_customers.groupby('cluster').agg({       
    148 │   │   'monetary': 'mean',                                             
    149 │   │   'frequency': 'mean',                                            
    150 │   │   'recency': 'mean',                                              
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/groupby/generi  
  c.py:1432 in aggregate                                                        
                                                                                
    1429 │   │   │   kwargs["engine_kwargs"] = engine_kwargs                    
    1430 │   │                                                                  
    1431 │   │   op = GroupByApply(self, func, args=args, kwargs=kwargs)        
  ❱ 1432 │   │   result = op.agg()                                              
    1433 │   │   if not is_dict_like(func) and result is not None:              
    1434 │   │   │   # GH #52849                                                
    1435 │   │   │   if not self.as_index and is_list_like(func):               
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:190    
  in agg                                                                        
                                                                                
     187 │   │   │   return self.apply_str()                                    
     188 │   │                                                                  
     189 │   │   if is_dict_like(func):                                         
  ❱  190 │   │   │   return self.agg_dict_like()                                
     191 │   │   elif is_list_like(func):                                       
     192 │   │   │   # we require a list, but not a 'str'                       
     193 │   │   │   return self.agg_list_like()                                
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:423    
  in agg_dict_like                                                              
                                                                                
     420 │   │   -------                                                        
     421 │   │   Result of aggregation.                                         
     422 │   │   """                                                            
  ❱  423 │   │   return self.agg_or_apply_dict_like(op_name="agg")              
     424 │                                                                      
     425 │   def compute_dict_like(                                             
     426 │   │   self,                                                          
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:1608   
  in agg_or_apply_dict_like                                                     
                                                                                
    1605 │   │   with com.temp_setattr(                                         
    1606 │   │   │   obj, "as_index", True, condition=hasattr(obj, "as_index")  
    1607 │   │   ):                                                             
  ❱ 1608 │   │   │   result_index, result_data = self.compute_dict_like(        
    1609 │   │   │   │   op_name, selected_obj, selection, kwargs               
    1610 │   │   │   )                                                          
    1611 │   │   result = self.wrap_results_dict_like(selected_obj, result_ind  
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:462    
  in compute_dict_like                                                          
                                                                                
     459 │   │   obj = self.obj                                                 
     460 │   │   is_groupby = isinstance(obj, (DataFrameGroupBy, SeriesGroupBy  
     461 │   │   func = cast(AggFuncTypeDict, self.func)                        
  ❱  462 │   │   func = self.normalize_dictlike_arg(op_name, selected_obj, fun  
     463 │   │                                                                  
     464 │   │   is_non_unique_col = (                                          
     465 │   │   │   selected_obj.ndim == 2                                     
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:663    
  in normalize_dictlike_arg                                                     
                                                                                
     660 │   │   │                                                              
     661 │   │   │   cols = Index(list(func.keys())).difference(obj.columns, s  
     662 │   │   │   if len(cols) > 0:                                          
  ❱  663 │   │   │   │   raise KeyError(f"Column(s) {list(cols)} do not exist"  
     664 │   │                                                                  
     665 │   │   aggregator_types = (list, tuple, dict)                         
     666                                                                        
────────────────────────────────────────────────────────────────────────────────
KeyError: "Column(s) ['customer_value_score'] do not exist"
2025-03-17 09:10:50.391 503 GET /script-health-check (127.0.0.1) 977.58ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/exec_code.py:121 in exec_func_with_error_handling                        
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:593 in code_to_exec                                     
                                                                                
  /mount/src/blank-app/streamlit_app.py:147 in <module>                         
                                                                                
    144 │   st.subheader("Average Metrics by Segment")                          
    145 │                                                                       
    146 │   # Calculate average metrics for each cluster                        
  ❱ 147 │   cluster_metrics = filtered_customers.groupby('cluster').agg({       
    148 │   │   'monetary': 'mean',                                             
    149 │   │   'frequency': 'mean',                                            
    150 │   │   'recency': 'mean',                                              
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/groupby/generi  
  c.py:1432 in aggregate                                                        
                                                                                
    1429 │   │   │   kwargs["engine_kwargs"] = engine_kwargs                    
    1430 │   │                                                                  
    1431 │   │   op = GroupByApply(self, func, args=args, kwargs=kwargs)        
  ❱ 1432 │   │   result = op.agg()                                              
    1433 │   │   if not is_dict_like(func) and result is not None:              
    1434 │   │   │   # GH #52849                                                
    1435 │   │   │   if not self.as_index and is_list_like(func):               
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:190    
  in agg                                                                        
                                                                                
     187 │   │   │   return self.apply_str()                                    
     188 │   │                                                                  
     189 │   │   if is_dict_like(func):                                         
  ❱  190 │   │   │   return self.agg_dict_like()                                
     191 │   │   elif is_list_like(func):                                       
     192 │   │   │   # we require a list, but not a 'str'                       
     193 │   │   │   return self.agg_list_like()                                
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:423    
  in agg_dict_like                                                              
                                                                                
     420 │   │   -------                                                        
     421 │   │   Result of aggregation.                                         
     422 │   │   """                                                            
  ❱  423 │   │   return self.agg_or_apply_dict_like(op_name="agg")              
     424 │                                                                      
     425 │   def compute_dict_like(                                             
     426 │   │   self,                                                          
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:1608   
  in agg_or_apply_dict_like                                                     
                                                                                
    1605 │   │   with com.temp_setattr(                                         
    1606 │   │   │   obj, "as_index", True, condition=hasattr(obj, "as_index")  
    1607 │   │   ):                                                             
  ❱ 1608 │   │   │   result_index, result_data = self.compute_dict_like(        
    1609 │   │   │   │   op_name, selected_obj, selection, kwargs               
    1610 │   │   │   )                                                          
    1611 │   │   result = self.wrap_results_dict_like(selected_obj, result_ind  
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:462    
  in compute_dict_like                                                          
                                                                                
     459 │   │   obj = self.obj                                                 
     460 │   │   is_groupby = isinstance(obj, (DataFrameGroupBy, SeriesGroupBy  
     461 │   │   func = cast(AggFuncTypeDict, self.func)                        
  ❱  462 │   │   func = self.normalize_dictlike_arg(op_name, selected_obj, fun  
     463 │   │                                                                  
     464 │   │   is_non_unique_col = (                                          
     465 │   │   │   selected_obj.ndim == 2                                     
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:663    
  in normalize_dictlike_arg                                                     
                                                                                
     660 │   │   │                                                              
     661 │   │   │   cols = Index(list(func.keys())).difference(obj.columns, s  
     662 │   │   │   if len(cols) > 0:                                          
  ❱  663 │   │   │   │   raise KeyError(f"Column(s) {list(cols)} do not exist"  
     664 │   │                                                                  
     665 │   │   aggregator_types = (list, tuple, dict)                         
     666                                                                        
────────────────────────────────────────────────────────────────────────────────
KeyError: "Column(s) ['customer_value_score'] do not exist"
2025-03-17 09:10:55.431 503 GET /script-health-check (127.0.0.1) 1045.95ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/exec_code.py:121 in exec_func_with_error_handling                        
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:593 in code_to_exec                                     
                                                                                
  /mount/src/blank-app/streamlit_app.py:147 in <module>                         
                                                                                
    144 │   st.subheader("Average Metrics by Segment")                          
    145 │                                                                       
    146 │   # Calculate average metrics for each cluster                        
  ❱ 147 │   cluster_metrics = filtered_customers.groupby('cluster').agg({       
    148 │   │   'monetary': 'mean',                                             
    149 │   │   'frequency': 'mean',                                            
    150 │   │   'recency': 'mean',                                              
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/groupby/generi  
  c.py:1432 in aggregate                                                        
                                                                                
    1429 │   │   │   kwargs["engine_kwargs"] = engine_kwargs                    
    1430 │   │                                                                  
    1431 │   │   op = GroupByApply(self, func, args=args, kwargs=kwargs)        
  ❱ 1432 │   │   result = op.agg()                                              
    1433 │   │   if not is_dict_like(func) and result is not None:              
    1434 │   │   │   # GH #52849                                                
    1435 │   │   │   if not self.as_index and is_list_like(func):               
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:190    
  in agg                                                                        
                                                                                
     187 │   │   │   return self.apply_str()                                    
     188 │   │                                                                  
     189 │   │   if is_dict_like(func):                                         
  ❱  190 │   │   │   return self.agg_dict_like()                                
     191 │   │   elif is_list_like(func):                                       
     192 │   │   │   # we require a list, but not a 'str'                       
     193 │   │   │   return self.agg_list_like()                                
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:423    
  in agg_dict_like                                                              
                                                                                
     420 │   │   -------                                                        
     421 │   │   Result of aggregation.                                         
     422 │   │   """                                                            
  ❱  423 │   │   return self.agg_or_apply_dict_like(op_name="agg")              
     424 │                                                                      
     425 │   def compute_dict_like(                                             
     426 │   │   self,                                                          
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:1608   
  in agg_or_apply_dict_like                                                     
                                                                                
    1605 │   │   with com.temp_setattr(                                         
    1606 │   │   │   obj, "as_index", True, condition=hasattr(obj, "as_index")  
    1607 │   │   ):                                                             
  ❱ 1608 │   │   │   result_index, result_data = self.compute_dict_like(        
    1609 │   │   │   │   op_name, selected_obj, selection, kwargs               
    1610 │   │   │   )                                                          
    1611 │   │   result = self.wrap_results_dict_like(selected_obj, result_ind  
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:462    
  in compute_dict_like                                                          
                                                                                
     459 │   │   obj = self.obj                                                 
     460 │   │   is_groupby = isinstance(obj, (DataFrameGroupBy, SeriesGroupBy  
     461 │   │   func = cast(AggFuncTypeDict, self.func)                        
  ❱  462 │   │   func = self.normalize_dictlike_arg(op_name, selected_obj, fun  
     463 │   │                                                                  
     464 │   │   is_non_unique_col = (                                          
     465 │   │   │   selected_obj.ndim == 2                                     
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:663    
  in normalize_dictlike_arg                                                     
                                                                                
     660 │   │   │                                                              
     661 │   │   │   cols = Index(list(func.keys())).difference(obj.columns, s  
     662 │   │   │   if len(cols) > 0:                                          
  ❱  663 │   │   │   │   raise KeyError(f"Column(s) {list(cols)} do not exist"  
     664 │   │                                                                  
     665 │   │   aggregator_types = (list, tuple, dict)                         
     666                                                                        
────────────────────────────────────────────────────────────────────────────────
KeyError: "Column(s) ['customer_value_score'] do not exist"
2025-03-17 09:11:00.437 503 GET /script-health-check (127.0.0.1) 1040.53ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/exec_code.py:121 in exec_func_with_error_handling                        
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:593 in code_to_exec                                     
                                                                                
  /mount/src/blank-app/streamlit_app.py:147 in <module>                         
                                                                                
    144 │   st.subheader("Average Metrics by Segment")                          
    145 │                                                                       
    146 │   # Calculate average metrics for each cluster                        
  ❱ 147 │   cluster_metrics = filtered_customers.groupby('cluster').agg({       
    148 │   │   'monetary': 'mean',                                             
    149 │   │   'frequency': 'mean',                                            
    150 │   │   'recency': 'mean',                                              
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/groupby/generi  
  c.py:1432 in aggregate                                                        
                                                                                
    1429 │   │   │   kwargs["engine_kwargs"] = engine_kwargs                    
    1430 │   │                                                                  
    1431 │   │   op = GroupByApply(self, func, args=args, kwargs=kwargs)        
  ❱ 1432 │   │   result = op.agg()                                              
    1433 │   │   if not is_dict_like(func) and result is not None:              
    1434 │   │   │   # GH #52849                                                
    1435 │   │   │   if not self.as_index and is_list_like(func):               
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:190    
  in agg                                                                        
                                                                                
     187 │   │   │   return self.apply_str()                                    
     188 │   │                                                                  
     189 │   │   if is_dict_like(func):                                         
  ❱  190 │   │   │   return self.agg_dict_like()                                
     191 │   │   elif is_list_like(func):                                       
     192 │   │   │   # we require a list, but not a 'str'                       
     193 │   │   │   return self.agg_list_like()                                
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:423    
  in agg_dict_like                                                              
                                                                                
     420 │   │   -------                                                        
     421 │   │   Result of aggregation.                                         
     422 │   │   """                                                            
  ❱  423 │   │   return self.agg_or_apply_dict_like(op_name="agg")              
     424 │                                                                      
     425 │   def compute_dict_like(                                             
     426 │   │   self,                                                          
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:1608   
  in agg_or_apply_dict_like                                                     
                                                                                
    1605 │   │   with com.temp_setattr(                                         
    1606 │   │   │   obj, "as_index", True, condition=hasattr(obj, "as_index")  
    1607 │   │   ):                                                             
  ❱ 1608 │   │   │   result_index, result_data = self.compute_dict_like(        
    1609 │   │   │   │   op_name, selected_obj, selection, kwargs               
    1610 │   │   │   )                                                          
    1611 │   │   result = self.wrap_results_dict_like(selected_obj, result_ind  
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:462    
  in compute_dict_like                                                          
                                                                                
     459 │   │   obj = self.obj                                                 
     460 │   │   is_groupby = isinstance(obj, (DataFrameGroupBy, SeriesGroupBy  
     461 │   │   func = cast(AggFuncTypeDict, self.func)                        
  ❱  462 │   │   func = self.normalize_dictlike_arg(op_name, selected_obj, fun  
     463 │   │                                                                  
     464 │   │   is_non_unique_col = (                                          
     465 │   │   │   selected_obj.ndim == 2                                     
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:663    
  in normalize_dictlike_arg                                                     
                                                                                
     660 │   │   │                                                              
     661 │   │   │   cols = Index(list(func.keys())).difference(obj.columns, s  
     662 │   │   │   if len(cols) > 0:                                          
  ❱  663 │   │   │   │   raise KeyError(f"Column(s) {list(cols)} do not exist"  
     664 │   │                                                                  
     665 │   │   aggregator_types = (list, tuple, dict)                         
     666                                                                        
────────────────────────────────────────────────────────────────────────────────
KeyError: "Column(s) ['customer_value_score'] do not exist"
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/exec_code.py:121 in exec_func_with_error_handling                        
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:593 in code_to_exec                                     
                                                                                
  /mount/src/blank-app/streamlit_app.py:147 in <module>                         
                                                                                
    144 │   st.subheader("Average Metrics by Segment")                          
    145 │                                                                       
    146 │   # Calculate average metrics for each cluster                        
  ❱ 147 │   cluster_metrics = filtered_customers.groupby('cluster').agg({       
    148 │   │   'monetary': 'mean',                                             
    149 │   │   'frequency': 'mean',                                            
    150 │   │   'recency': 'mean',                                              
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/groupby/generi  
  c.py:1432 in aggregate                                                        
                                                                                
    1429 │   │   │   kwargs["engine_kwargs"] = engine_kwargs                    
    1430 │   │                                                                  
    1431 │   │   op = GroupByApply(self, func, args=args, kwargs=kwargs)        
  ❱ 1432 │   │   result = op.agg()                                              
    1433 │   │   if not is_dict_like(func) and result is not None:              
    1434 │   │   │   # GH #52849                                                
    1435 │   │   │   if not self.as_index and is_list_like(func):               
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:190    
  in agg                                                                        
                                                                                
     187 │   │   │   return self.apply_str()                                    
     188 │   │                                                                  
     189 │   │   if is_dict_like(func):                                         
  ❱  190 │   │   │   return self.agg_dict_like()                                
     191 │   │   elif is_list_like(func):                                       
     192 │   │   │   # we require a list, but not a 'str'                       
     193 │   │   │   return self.agg_list_like()                                
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:423    
  in agg_dict_like                                                              
                                                                                
     420 │   │   -------                                                        
     421 │   │   Result of aggregation.                                         
     422 │   │   """                                                            
  ❱  423 │   │   return self.agg_or_apply_dict_like(op_name="agg")              
     424 │                                                                      
     425 │   def compute_dict_like(                                             
     426 │   │   self,                                                          
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:1608   
  in agg_or_apply_dict_like                                                     
                                                                                
    1605 │   │   with com.temp_setattr(                                         
    1606 │   │   │   obj, "as_index", True, condition=hasattr(obj, "as_index")  
    1607 │   │   ):                                                             
  ❱ 1608 │   │   │   result_index, result_data = self.compute_dict_like(        
    1609 │   │   │   │   op_name, selected_obj, selection, kwargs               
    1610 │   │   │   )                                                          
    1611 │   │   result = self.wrap_results_dict_like(selected_obj, result_ind  
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:462    
  in compute_dict_like                                                          
                                                                                
     459 │   │   obj = self.obj                                                 
     460 │   │   is_groupby = isinstance(obj, (DataFrameGroupBy, SeriesGroupBy  
     461 │   │   func = cast(AggFuncTypeDict, self.func)                        
  ❱  462 │   │   func = self.normalize_dictlike_arg(op_name, selected_obj, fun  
     463 │   │                                                                  
     464 │   │   is_non_unique_col = (                                          
     465 │   │   │   selected_obj.ndim == 2                                     
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:663    
  in normalize_dictlike_arg                                                     
                                                                                
     660 │   │   │                                                              
     661 │   │   │   cols = Index(list(func.keys())).difference(obj.columns, s  
     662 │   │   │   if len(cols) > 0:                                          
  ❱  663 │   │   │   │   raise KeyError(f"Column(s) {list(cols)} do not exist"  
     664 │   │                                                                  
     665 │   │   aggregator_types = (list, tuple, dict)                         
     666                                                                        
────────────────────────────────────────────────────────────────────────────────
KeyError: "Column(s) ['customer_value_score'] do not exist"
2025-03-17 09:11:06.574 503 GET /script-health-check (127.0.0.1) 2249.76ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/exec_code.py:121 in exec_func_with_error_handling                        
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:593 in code_to_exec                                     
                                                                                
  /mount/src/blank-app/streamlit_app.py:147 in <module>                         
                                                                                
    144 │   st.subheader("Average Metrics by Segment")                          
    145 │                                                                       
    146 │   # Calculate average metrics for each cluster                        
  ❱ 147 │   cluster_metrics = filtered_customers.groupby('cluster').agg({       
    148 │   │   'monetary': 'mean',                                             
    149 │   │   'frequency': 'mean',                                            
    150 │   │   'recency': 'mean',                                              
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/groupby/generi  
  c.py:1432 in aggregate                                                        
                                                                                
    1429 │   │   │   kwargs["engine_kwargs"] = engine_kwargs                    
    1430 │   │                                                                  
    1431 │   │   op = GroupByApply(self, func, args=args, kwargs=kwargs)        
  ❱ 1432 │   │   result = op.agg()                                              
    1433 │   │   if not is_dict_like(func) and result is not None:              
    1434 │   │   │   # GH #52849                                                
    1435 │   │   │   if not self.as_index and is_list_like(func):               
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:190    
  in agg                                                                        
                                                                                
     187 │   │   │   return self.apply_str()                                    
     188 │   │                                                                  
     189 │   │   if is_dict_like(func):                                         
  ❱  190 │   │   │   return self.agg_dict_like()                                
     191 │   │   elif is_list_like(func):                                       
     192 │   │   │   # we require a list, but not a 'str'                       
     193 │   │   │   return self.agg_list_like()                                
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:423    
  in agg_dict_like                                                              
                                                                                
     420 │   │   -------                                                        
     421 │   │   Result of aggregation.                                         
     422 │   │   """                                                            
  ❱  423 │   │   return self.agg_or_apply_dict_like(op_name="agg")              
     424 │                                                                      
     425 │   def compute_dict_like(                                             
     426 │   │   self,                                                          
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:1608   
  in agg_or_apply_dict_like                                                     
                                                                                
    1605 │   │   with com.temp_setattr(                                         
    1606 │   │   │   obj, "as_index", True, condition=hasattr(obj, "as_index")  
    1607 │   │   ):                                                             
  ❱ 1608 │   │   │   result_index, result_data = self.compute_dict_like(        
    1609 │   │   │   │   op_name, selected_obj, selection, kwargs               
    1610 │   │   │   )                                                          
    1611 │   │   result = self.wrap_results_dict_like(selected_obj, result_ind  
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:462    
  in compute_dict_like                                                          
                                                                                
     459 │   │   obj = self.obj                                                 
     460 │   │   is_groupby = isinstance(obj, (DataFrameGroupBy, SeriesGroupBy  
     461 │   │   func = cast(AggFuncTypeDict, self.func)                        
  ❱  462 │   │   func = self.normalize_dictlike_arg(op_name, selected_obj, fun  
     463 │   │                                                                  
     464 │   │   is_non_unique_col = (                                          
     465 │   │   │   selected_obj.ndim == 2                                     
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:663    
  in normalize_dictlike_arg                                                     
                                                                                
     660 │   │   │                                                              
     661 │   │   │   cols = Index(list(func.keys())).difference(obj.columns, s  
     662 │   │   │   if len(cols) > 0:                                          
  ❱  663 │   │   │   │   raise KeyError(f"Column(s) {list(cols)} do not exist"  
     664 │   │                                                                  
     665 │   │   aggregator_types = (list, tuple, dict)                         
     666                                                                        
────────────────────────────────────────────────────────────────────────────────
KeyError: "Column(s) ['customer_value_score'] do not exist"
2025-03-17 09:11:10.415 503 GET /script-health-check (127.0.0.1) 1081.86ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/exec_code.py:121 in exec_func_with_error_handling                        
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:593 in code_to_exec                                     
                                                                                
  /mount/src/blank-app/streamlit_app.py:147 in <module>                         
                                                                                
    144 │   st.subheader("Average Metrics by Segment")                          
    145 │                                                                       
    146 │   # Calculate average metrics for each cluster                        
  ❱ 147 │   cluster_metrics = filtered_customers.groupby('cluster').agg({       
    148 │   │   'monetary': 'mean',                                             
    149 │   │   'frequency': 'mean',                                            
    150 │   │   'recency': 'mean',                                              
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/groupby/generi  
  c.py:1432 in aggregate                                                        
                                                                                
    1429 │   │   │   kwargs["engine_kwargs"] = engine_kwargs                    
    1430 │   │                                                                  
    1431 │   │   op = GroupByApply(self, func, args=args, kwargs=kwargs)        
  ❱ 1432 │   │   result = op.agg()                                              
    1433 │   │   if not is_dict_like(func) and result is not None:              
    1434 │   │   │   # GH #52849                                                
    1435 │   │   │   if not self.as_index and is_list_like(func):               
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:190    
  in agg                                                                        
                                                                                
     187 │   │   │   return self.apply_str()                                    
     188 │   │                                                                  
     189 │   │   if is_dict_like(func):                                         
  ❱  190 │   │   │   return self.agg_dict_like()                                
     191 │   │   elif is_list_like(func):                                       
     192 │   │   │   # we require a list, but not a 'str'                       
     193 │   │   │   return self.agg_list_like()                                
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:423    
  in agg_dict_like                                                              
                                                                                
     420 │   │   -------                                                        
     421 │   │   Result of aggregation.                                         
     422 │   │   """                                                            
  ❱  423 │   │   return self.agg_or_apply_dict_like(op_name="agg")              
     424 │                                                                      
     425 │   def compute_dict_like(                                             
     426 │   │   self,                                                          
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:1608   
  in agg_or_apply_dict_like                                                     
                                                                                
    1605 │   │   with com.temp_setattr(                                         
    1606 │   │   │   obj, "as_index", True, condition=hasattr(obj, "as_index")  
    1607 │   │   ):                                                             
  ❱ 1608 │   │   │   result_index, result_data = self.compute_dict_like(        
    1609 │   │   │   │   op_name, selected_obj, selection, kwargs               
    1610 │   │   │   )                                                          
    1611 │   │   result = self.wrap_results_dict_like(selected_obj, result_ind  
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:462    
  in compute_dict_like                                                          
                                                                                
     459 │   │   obj = self.obj                                                 
     460 │   │   is_groupby = isinstance(obj, (DataFrameGroupBy, SeriesGroupBy  
     461 │   │   func = cast(AggFuncTypeDict, self.func)                        
  ❱  462 │   │   func = self.normalize_dictlike_arg(op_name, selected_obj, fun  
     463 │   │                                                                  
     464 │   │   is_non_unique_col = (                                          
     465 │   │   │   selected_obj.ndim == 2                                     
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:663    
  in normalize_dictlike_arg                                                     
                                                                                
     660 │   │   │                                                              
     661 │   │   │   cols = Index(list(func.keys())).difference(obj.columns, s  
     662 │   │   │   if len(cols) > 0:                                          
  ❱  663 │   │   │   │   raise KeyError(f"Column(s) {list(cols)} do not exist"  
     664 │   │                                                                  
     665 │   │   aggregator_types = (list, tuple, dict)                         
     666                                                                        
────────────────────────────────────────────────────────────────────────────────
KeyError: "Column(s) ['customer_value_score'] do not exist"
2025-03-17 09:11:15.374 503 GET /script-health-check (127.0.0.1) 990.65ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/exec_code.py:121 in exec_func_with_error_handling                        
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:593 in code_to_exec                                     
                                                                                
  /mount/src/blank-app/streamlit_app.py:147 in <module>                         
                                                                                
    144 │   st.subheader("Average Metrics by Segment")                          
    145 │                                                                       
    146 │   # Calculate average metrics for each cluster                        
  ❱ 147 │   cluster_metrics = filtered_customers.groupby('cluster').agg({       
    148 │   │   'monetary': 'mean',                                             
    149 │   │   'frequency': 'mean',                                            
    150 │   │   'recency': 'mean',                                              
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/groupby/generi  
  c.py:1432 in aggregate                                                        
                                                                                
    1429 │   │   │   kwargs["engine_kwargs"] = engine_kwargs                    
    1430 │   │                                                                  
    1431 │   │   op = GroupByApply(self, func, args=args, kwargs=kwargs)        
  ❱ 1432 │   │   result = op.agg()                                              
    1433 │   │   if not is_dict_like(func) and result is not None:              
    1434 │   │   │   # GH #52849                                                
    1435 │   │   │   if not self.as_index and is_list_like(func):               
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:190    
  in agg                                                                        
                                                                                
     187 │   │   │   return self.apply_str()                                    
     188 │   │                                                                  
     189 │   │   if is_dict_like(func):                                         
  ❱  190 │   │   │   return self.agg_dict_like()                                
     191 │   │   elif is_list_like(func):                                       
     192 │   │   │   # we require a list, but not a 'str'                       
     193 │   │   │   return self.agg_list_like()                                
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:423    
  in agg_dict_like                                                              
                                                                                
     420 │   │   -------                                                        
     421 │   │   Result of aggregation.                                         
     422 │   │   """                                                            
  ❱  423 │   │   return self.agg_or_apply_dict_like(op_name="agg")              
     424 │                                                                      
     425 │   def compute_dict_like(                                             
     426 │   │   self,                                                          
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:1608   
  in agg_or_apply_dict_like                                                     
                                                                                
    1605 │   │   with com.temp_setattr(                                         
    1606 │   │   │   obj, "as_index", True, condition=hasattr(obj, "as_index")  
    1607 │   │   ):                                                             
  ❱ 1608 │   │   │   result_index, result_data = self.compute_dict_like(        
    1609 │   │   │   │   op_name, selected_obj, selection, kwargs               
    1610 │   │   │   )                                                          
    1611 │   │   result = self.wrap_results_dict_like(selected_obj, result_ind  
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:462    
  in compute_dict_like                                                          
                                                                                
     459 │   │   obj = self.obj                                                 
     460 │   │   is_groupby = isinstance(obj, (DataFrameGroupBy, SeriesGroupBy  
     461 │   │   func = cast(AggFuncTypeDict, self.func)                        
  ❱  462 │   │   func = self.normalize_dictlike_arg(op_name, selected_obj, fun  
     463 │   │                                                                  
     464 │   │   is_non_unique_col = (                                          
     465 │   │   │   selected_obj.ndim == 2                                     
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:663    
  in normalize_dictlike_arg                                                     
                                                                                
     660 │   │   │                                                              
     661 │   │   │   cols = Index(list(func.keys())).difference(obj.columns, s  
     662 │   │   │   if len(cols) > 0:                                          
  ❱  663 │   │   │   │   raise KeyError(f"Column(s) {list(cols)} do not exist"  
     664 │   │                                                                  
     665 │   │   aggregator_types = (list, tuple, dict)                         
     666                                                                        
────────────────────────────────────────────────────────────────────────────────
KeyError: "Column(s) ['customer_value_score'] do not exist"
2025-03-17 09:11:20.548 503 GET /script-health-check (127.0.0.1) 1133.57ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/exec_code.py:121 in exec_func_with_error_handling                        
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:593 in code_to_exec                                     
                                                                                
  /mount/src/blank-app/streamlit_app.py:147 in <module>                         
                                                                                
    144 │   st.subheader("Average Metrics by Segment")                          
    145 │                                                                       
    146 │   # Calculate average metrics for each cluster                        
  ❱ 147 │   cluster_metrics = filtered_customers.groupby('cluster').agg({       
    148 │   │   'monetary': 'mean',                                             
    149 │   │   'frequency': 'mean',                                            
    150 │   │   'recency': 'mean',                                              
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/groupby/generi  
  c.py:1432 in aggregate                                                        
                                                                                
    1429 │   │   │   kwargs["engine_kwargs"] = engine_kwargs                    
    1430 │   │                                                                  
    1431 │   │   op = GroupByApply(self, func, args=args, kwargs=kwargs)        
  ❱ 1432 │   │   result = op.agg()                                              
    1433 │   │   if not is_dict_like(func) and result is not None:              
    1434 │   │   │   # GH #52849                                                
    1435 │   │   │   if not self.as_index and is_list_like(func):               
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:190    
  in agg                                                                        
                                                                                
     187 │   │   │   return self.apply_str()                                    
     188 │   │                                                                  
     189 │   │   if is_dict_like(func):                                         
  ❱  190 │   │   │   return self.agg_dict_like()                                
     191 │   │   elif is_list_like(func):                                       
     192 │   │   │   # we require a list, but not a 'str'                       
     193 │   │   │   return self.agg_list_like()                                
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:423    
  in agg_dict_like                                                              
                                                                                
     420 │   │   -------                                                        
     421 │   │   Result of aggregation.                                         
     422 │   │   """                                                            
  ❱  423 │   │   return self.agg_or_apply_dict_like(op_name="agg")              
     424 │                                                                      
     425 │   def compute_dict_like(                                             
     426 │   │   self,                                                          
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:1608   
  in agg_or_apply_dict_like                                                     
                                                                                
    1605 │   │   with com.temp_setattr(                                         
    1606 │   │   │   obj, "as_index", True, condition=hasattr(obj, "as_index")  
    1607 │   │   ):                                                             
  ❱ 1608 │   │   │   result_index, result_data = self.compute_dict_like(        
    1609 │   │   │   │   op_name, selected_obj, selection, kwargs               
    1610 │   │   │   )                                                          
    1611 │   │   result = self.wrap_results_dict_like(selected_obj, result_ind  
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:462    
  in compute_dict_like                                                          
                                                                                
     459 │   │   obj = self.obj                                                 
     460 │   │   is_groupby = isinstance(obj, (DataFrameGroupBy, SeriesGroupBy  
     461 │   │   func = cast(AggFuncTypeDict, self.func)                        
  ❱  462 │   │   func = self.normalize_dictlike_arg(op_name, selected_obj, fun  
     463 │   │                                                                  
     464 │   │   is_non_unique_col = (                                          
     465 │   │   │   selected_obj.ndim == 2                                     
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:663    
  in normalize_dictlike_arg                                                     
                                                                                
     660 │   │   │                                                              
     661 │   │   │   cols = Index(list(func.keys())).difference(obj.columns, s  
     662 │   │   │   if len(cols) > 0:                                          
  ❱  663 │   │   │   │   raise KeyError(f"Column(s) {list(cols)} do not exist"  
     664 │   │                                                                  
     665 │   │   aggregator_types = (list, tuple, dict)                         
     666                                                                        
────────────────────────────────────────────────────────────────────────────────
KeyError: "Column(s) ['customer_value_score'] do not exist"
2025-03-17 09:11:25.272 503 GET /script-health-check (127.0.0.1) 863.17ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/exec_code.py:121 in exec_func_with_error_handling                        
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:593 in code_to_exec                                     
                                                                                
  /mount/src/blank-app/streamlit_app.py:147 in <module>                         
                                                                                
    144 │   st.subheader("Average Metrics by Segment")                          
    145 │                                                                       
    146 │   # Calculate average metrics for each cluster                        
  ❱ 147 │   cluster_metrics = filtered_customers.groupby('cluster').agg({       
    148 │   │   'monetary': 'mean',                                             
    149 │   │   'frequency': 'mean',                                            
    150 │   │   'recency': 'mean',                                              
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/groupby/generi  
  c.py:1432 in aggregate                                                        
                                                                                
    1429 │   │   │   kwargs["engine_kwargs"] = engine_kwargs                    
    1430 │   │                                                                  
    1431 │   │   op = GroupByApply(self, func, args=args, kwargs=kwargs)        
  ❱ 1432 │   │   result = op.agg()                                              
    1433 │   │   if not is_dict_like(func) and result is not None:              
    1434 │   │   │   # GH #52849                                                
    1435 │   │   │   if not self.as_index and is_list_like(func):               
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:190    
  in agg                                                                        
                                                                                
     187 │   │   │   return self.apply_str()                                    
     188 │   │                                                                  
     189 │   │   if is_dict_like(func):                                         
  ❱  190 │   │   │   return self.agg_dict_like()                                
     191 │   │   elif is_list_like(func):                                       
     192 │   │   │   # we require a list, but not a 'str'                       
     193 │   │   │   return self.agg_list_like()                                
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:423    
  in agg_dict_like                                                              
                                                                                
     420 │   │   -------                                                        
     421 │   │   Result of aggregation.                                         
     422 │   │   """                                                            
  ❱  423 │   │   return self.agg_or_apply_dict_like(op_name="agg")              
     424 │                                                                      
     425 │   def compute_dict_like(                                             
     426 │   │   self,                                                          
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:1608   
  in agg_or_apply_dict_like                                                     
                                                                                
    1605 │   │   with com.temp_setattr(                                         
    1606 │   │   │   obj, "as_index", True, condition=hasattr(obj, "as_index")  
    1607 │   │   ):                                                             
  ❱ 1608 │   │   │   result_index, result_data = self.compute_dict_like(        
    1609 │   │   │   │   op_name, selected_obj, selection, kwargs               
    1610 │   │   │   )                                                          
    1611 │   │   result = self.wrap_results_dict_like(selected_obj, result_ind  
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:462    
  in compute_dict_like                                                          
                                                                                
     459 │   │   obj = self.obj                                                 
     460 │   │   is_groupby = isinstance(obj, (DataFrameGroupBy, SeriesGroupBy  
     461 │   │   func = cast(AggFuncTypeDict, self.func)                        
  ❱  462 │   │   func = self.normalize_dictlike_arg(op_name, selected_obj, fun  
     463 │   │                                                                  
     464 │   │   is_non_unique_col = (                                          
     465 │   │   │   selected_obj.ndim == 2                                     
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:663    
  in normalize_dictlike_arg                                                     
                                                                                
     660 │   │   │                                                              
     661 │   │   │   cols = Index(list(func.keys())).difference(obj.columns, s  
     662 │   │   │   if len(cols) > 0:                                          
  ❱  663 │   │   │   │   raise KeyError(f"Column(s) {list(cols)} do not exist"  
     664 │   │                                                                  
     665 │   │   aggregator_types = (list, tuple, dict)                         
     666                                                                        
────────────────────────────────────────────────────────────────────────────────
KeyError: "Column(s) ['customer_value_score'] do not exist"
2025-03-17 09:11:30.539 503 GET /script-health-check (127.0.0.1) 1101.78ms
────────────────────── Traceback (most recent call last) ───────────────────────
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/exec_code.py:121 in exec_func_with_error_handling                        
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/streamlit/runtime/scriptru  
  nner/script_runner.py:593 in code_to_exec                                     
                                                                                
  /mount/src/blank-app/streamlit_app.py:147 in <module>                         
                                                                                
    144 │   st.subheader("Average Metrics by Segment")                          
    145 │                                                                       
    146 │   # Calculate average metrics for each cluster                        
  ❱ 147 │   cluster_metrics = filtered_customers.groupby('cluster').agg({       
    148 │   │   'monetary': 'mean',                                             
    149 │   │   'frequency': 'mean',                                            
    150 │   │   'recency': 'mean',                                              
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/groupby/generi  
  c.py:1432 in aggregate                                                        
                                                                                
    1429 │   │   │   kwargs["engine_kwargs"] = engine_kwargs                    
    1430 │   │                                                                  
    1431 │   │   op = GroupByApply(self, func, args=args, kwargs=kwargs)        
  ❱ 1432 │   │   result = op.agg()                                              
    1433 │   │   if not is_dict_like(func) and result is not None:              
    1434 │   │   │   # GH #52849                                                
    1435 │   │   │   if not self.as_index and is_list_like(func):               
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:190    
  in agg                                                                        
                                                                                
     187 │   │   │   return self.apply_str()                                    
     188 │   │                                                                  
     189 │   │   if is_dict_like(func):                                         
  ❱  190 │   │   │   return self.agg_dict_like()                                
     191 │   │   elif is_list_like(func):                                       
     192 │   │   │   # we require a list, but not a 'str'                       
     193 │   │   │   return self.agg_list_like()                                
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:423    
  in agg_dict_like                                                              
                                                                                
     420 │   │   -------                                                        
     421 │   │   Result of aggregation.                                         
     422 │   │   """                                                            
  ❱  423 │   │   return self.agg_or_apply_dict_like(op_name="agg")              
     424 │                                                                      
     425 │   def compute_dict_like(                                             
     426 │   │   self,                                                          
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:1608   
  in agg_or_apply_dict_like                                                     
                                                                                
    1605 │   │   with com.temp_setattr(                                         
    1606 │   │   │   obj, "as_index", True, condition=hasattr(obj, "as_index")  
    1607 │   │   ):                                                             
  ❱ 1608 │   │   │   result_index, result_data = self.compute_dict_like(        
    1609 │   │   │   │   op_name, selected_obj, selection, kwargs               
    1610 │   │   │   )                                                          
    1611 │   │   result = self.wrap_results_dict_like(selected_obj, result_ind  
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:462    
  in compute_dict_like                                                          
                                                                                
     459 │   │   obj = self.obj                                                 
     460 │   │   is_groupby = isinstance(obj, (DataFrameGroupBy, SeriesGroupBy  
     461 │   │   func = cast(AggFuncTypeDict, self.func)                        
  ❱  462 │   │   func = self.normalize_dictlike_arg(op_name, selected_obj, fun  
     463 │   │                                                                  
     464 │   │   is_non_unique_col = (                                          
     465 │   │   │   selected_obj.ndim == 2                                     
                                                                                
  /home/adminuser/venv/lib/python3.12/site-packages/pandas/core/apply.py:663    
  in normalize_dictlike_arg                                                     
                                                                                
     660 │   │   │                                                              
     661 │   │   │   cols = Index(list(func.keys())).difference(obj.columns, s  
     662 │   │   │   if len(cols) > 0:                                          
  ❱  663 │   │   │   │   raise KeyError(f"Column(s) {list(cols)} do not exist"  
     664 │   │                                                                  
     665 │   │   aggregator_types = (list, tuple, dict)                         
     666                                                                        
────────────────────────────────────────────────────────────────────────────────
KeyError: "Column(s) ['customer_value_score'] do not exist"
2025-03-17 09:11:35.479 503 GET /script-health-check (127.0.0.1) 1044.92ms